%{
  /* PSD.tmc derives X,Y & Total Power for the two different
     PSD detectors.
	 XL_X XL_Y XL_TP
	 DL_X DL_Y DL_TP
	 This operation will be based on the assumption that
	 BmPsMux == 0 => XL, 1 => DL, but that can be changed here.
	 Because of PSD orientation, X and Y directions are defined:
	 XL_X=BmPsN-BmPsS; XL_Y=BmPsE-BmPsW; DL_X=BmPsN-BmPsS; DL_Y=BmPsW-BmPsE;
  */
  #include <math.h> /* For floor() which is auto-generated */
%}

TM typedef double PSD_pos_t { text "%4d"; }
/* PSD_pwr_t is the sum of four raw BmPs channels. Each
   is a 12-bit value (0-4095) so the sum is 14-bits (0-16383).
   Here we convert to VOLTS in order to get a familiar
   0-10 value for display.
*/
TM typedef unsigned short PSD_pwr_t { text "%5.2lf"; convert VOLTS;  }
Calibration ( PSD_pwr_t, VOLTS ) { 0, 0, 16384, 10. }

PSD_pos_t XL_X; invalidate XL_X;
PSD_pos_t XL_Y; invalidate XL_Y;
PSD_pwr_t XL_TP; invalidate XL_TP;
if ( BmPsMux == 0 ) {
  XL_Y = (BmPsE + BmPsW > 0) ?
	((( BmPsE - BmPsW ) * 999. ) / ( BmPsE + BmPsW )) :
	99999;
  XL_X = (BmPsN + BmPsS > 0) ?
	((( BmPsN - BmPsS ) * 999. ) / ( BmPsN + BmPsS )) :
	99999;
  XL_TP = BmPsN + BmPsS + BmPsE + BmPsW;
  validate XL_X;
  validate XL_Y;
  validate XL_TP;
}

PSD_pos_t DL_X; invalidate DL_X;
PSD_pos_t DL_Y; invalidate DL_Y;
PSD_pwr_t DL_TP; invalidate DL_TP;
if ( BmPsMux != 0 ) {
  DL_Y = (BmPsE || BmPsW ) ?
	(( BmPsW - BmPsE ) * 999. ) / ( BmPsE + BmPsW ) :
	99999;
  DL_X = (BmPsN || BmPsS ) ?
	(( BmPsN - BmPsS ) * 999. ) / ( BmPsN + BmPsS ) :
	99999;
  DL_TP = BmPsN + BmPsS + BmPsE + BmPsW;
  validate DL_X;
  validate DL_Y;
  validate DL_TP;
}
