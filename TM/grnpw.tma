Partition

{ double GP_prev_GrnPw;
  int GP_prev_DubT;
  int GP_prev_datapt; /* True if we have a point logged in */
}

%{
  #include "CmdData.h"
  #define GP_SMALL_STEP 100
  #define GP_SMALL_DP 2 /* Was 50 when using DL_TP */
  #define GP_DELAY_PTS 20
  #define GP_AVERAGE_PTS 10
  #define GP_MAX_KDPTSP 4000
  #define GP_MIN_KDPTSP 1000
  #define GP_KDPTSP_SEEK_STEP 200
  #define GP_KDPTSP_SCAN_STEP 50
  #define GP_LOW_P_THRESHOLD 100
  static double GP_Sum;
  static int GP_Count, GP_Delay;
  static int GP_crnt_KDPTSP;
%}

State GreenPeakInit {
		{ GP_prev_datapt = 0; }
		{ if ( SW_St == SWS_GRNPK_ON ) Validate GreenPeak_Start; }
		{ if ( SW_St == SWS_GRNPK_OFF ) Validate GreenPeak_Stop; }
		{ if ( SW_St == SWS_GRNPK_SCAN ) Validate GreenPeak_Scan; }
}

State GreenPeak_Start {
		> Log Green Power Peakup Enabled
		> SW Status Value to 0
		Hold until ( SW_St == 0 );
		Validate GreenPeak;
}

State GreenPeak_Restart {
		{ GP_prev_datapt = 0; }
		Validate GreenPeak;
}

State GreenPeak {
		{ GP_Sum = 0; GP_Count = 0; GP_Delay = 0; }
		{ if ( SW_St == SWS_GRNPK_ON ) Validate GreenPeak_Start; }
		{ if ( SW_St == SWS_GRNPK_OFF ) Validate GreenPeak_Stop; }
		{ if ( SW_St == SWS_GRNPK_SCAN ) Validate GreenPeak_Scan; }
		{ GP_crnt_KDPTSP = convert( RKDPTSP ); }
		{ /* depending on (1 Hz, DL_TP Once) */
		  if ( GP_Delay < GP_DELAY_PTS ) GP_Delay++;
		  else {
			GP_Sum += GrnP1; /* DL_TP; */
			GP_Count++;
		  }
		  if ( GP_Count >= GP_AVERAGE_PTS ) {
			int GP_new_DubT, new_dir;
			double GP_new_GrnPw, dP_dT;
			double prev_step;
		  
			GP_new_DubT = GP_crnt_KDPTSP;
			GP_new_GrnPw = GP_Sum / GP_Count;
			if ( GP_new_DubT <= GP_MIN_KDPTSP ) new_dir = 1;
			else if ( GP_new_DubT >= GP_MAX_KDPTSP ) new_dir = -1;
			else if ( GP_prev_datapt ) {
			  prev_step = GP_new_DubT > GP_prev_DubT ? 1 :
				(GP_new_DubT == GP_prev_DubT ? 0 : -1 );
			  if ( prev_step != 0 ) {
				dP_dT = (GP_new_GrnPw - GP_prev_GrnPw) * prev_step;
				new_dir = (dP_dT >= 0) ? 1 : -1;
				if ( dP_dT * new_dir < GP_SMALL_DP ) new_dir = 0;
			  } else {
				new_dir = 1;
			  }
			} else {
			  new_dir = 1;
			}
			GP_prev_DubT = GP_new_DubT;
			GP_prev_GrnPw = GP_new_GrnPw;
			GP_prev_datapt = 1;
			GP_Sum = 0; GP_Count = 0; GP_Delay = 0;
			if ( new_dir == 0 ) Validate GreenPeakWait;
			else {
			  GP_new_DubT += GP_SMALL_STEP * new_dir;
			  ci_sendfcmd( 2, "Topaz KDP SetPoint %d\n", 
							  GP_new_DubT );
			}
		  }
		}
		
		> Log Entering State GreenPeak
}

State GreenPeakWait { 
		{ if ( SW_St == SWS_GRNPK_ON ) Validate GreenPeak_Start; }
		{ if ( SW_St == SWS_GRNPK_OFF ) Validate GreenPeak_Stop; }
		{ if ( SW_St == SWS_GRNPK_SCAN ) Validate GreenPeak_Scan; }
		{ if ( GP_prev_datapt == 0 ) Validate GreenPeak; }
		> Log Entering State GreenPeakWait
  +5:00 Validate GreenPeak_Restart;
}

State GreenPeak_Stop {
		> Log Green Power Peakup Disabled
		> SW Status Value to 0
		Hold until ( SW_St == 0 );
		Validate GreenPeakInit;
}

State GreenPeakSeek {
		{ if ( SW_St == SWS_GRNPK_ON ) Validate GreenPeak_Start; }
		{ if ( SW_St == SWS_GRNPK_OFF ) Validate GreenPeak_Stop; }
		{ if ( SW_St == SWS_GRNPK_SCAN ) Validate GreenPeak_Scan; }
		{ GP_crnt_KDPTSP = convert( RKDPTSP ); }
		{ GP_Sum = 0; GP_Count = 0; GP_Delay = 0; }
		{ ci_sendfcmd( 2, "Topaz KDP SetPoint %d\n", 
									GP_MAX_KDPTSP ); }

		{ /* depending on (1 Hz, DL_TP Once) */
		  if ( GP_Delay < GP_DELAY_PTS ) GP_Delay++;
		  else {
			GP_Sum += GrnP1; /* DL_TP; */
			GP_Count++;
			if ( GP_Count >= GP_AVERAGE_PTS ) {
			  double GP_new_GrnPw;
			  GP_new_GrnPw = GP_Sum/GP_Count;
			  if ( GP_new_GrnPw < GP_LOW_P_THRESHOLD ) {
				int GP_new_DubT;
				GP_new_DubT = GP_crnt_KDPTSP - GP_KDPTSP_SEEK_STEP;
				if ( GP_new_DubT < GP_MIN_KDPTSP )
				  GP_new_DubT = GP_MAX_KDPTSP;
				ci_sendfcmd( 2, "Topaz KDP SetPoint %d\n", 
										  GP_new_DubT );
				GP_Delay = GP_Count = 0; GP_Sum = 0;
			  } else {
				Validate GreenPeak_Restart;
			  }
			}
		  }
		}
}

State GreenPeak_Scan {
		{ if ( SW_St == SWS_GRNPK_ON ) Validate GreenPeak_Start; }
		{ if ( SW_St == SWS_GRNPK_OFF ) Validate GreenPeak_Stop; }
		{ GP_crnt_KDPTSP = convert( RKDPTSP ); }
		{ GP_Delay = 0; }
		{ ci_sendfcmd( 2, "Topaz KDP SetPoint %d\n", 
									GP_MIN_KDPTSP ); }

		> Log Green Peakup Scan Initiated
		> SW Status Value to 0
		depending on ( 1 Hz ) {
		  if ( GP_Delay < GP_DELAY_PTS+GP_AVERAGE_PTS ) GP_Delay++;
		  else {
			int GP_new_DubT;
			GP_new_DubT = GP_crnt_KDPTSP + GP_KDPTSP_SCAN_STEP;
			if ( GP_new_DubT > GP_MAX_KDPTSP ) {
			  Validate GreenPeakSeek;
			} else {
			  ci_sendfcmd( 2, "Topaz KDP SetPoint %d\n", 
										GP_new_DubT );
			  GP_Delay = 0;
			}
		  }
		}
}
