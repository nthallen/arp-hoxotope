%{ /* inst.types defines data types for OH/HO2/O3/H2O */
%}
/* Output types */
TM typedef double AMPS { text "%4.1lf"; }
TM typedef double VOLTS { text "%4.1lf"; }
TM typedef double KELVIN { text "%5.1lf"; }
TM typedef double CELCIUS { text "%5.1lf"; }
TM typedef double TORR { text "%5.1lf"; }
TM typedef unsigned short RPM { text "%4d"; }
TM typedef unsigned short UINT { text "%5u"; }
TM typedef signed short SINT { text "%6d"; }
TM typedef unsigned long int TMLONG { text "%8ld"; }

/* Input types */
TM typedef unsigned char AD8 {
  collect x = sbb(x.address);
  convert VOLTS;
  text "%4.2lf";
}
  calibration (AD8, VOLTS) {
	  0,  0,
	256, 10
  }

TM typedef AD8 AD8_5V;
  calibration (AD8_5V, VOLTS) {
	  0, 0,
	256, 5
  }

TM typedef AD8 AD8_51V { convert VOLTS; text "%4.1lf"; }
  calibration (AD8_51V, VOLTS) {
	  0,    0,
	256, 51.1
  }

TM typedef AD8 AD8_T10K { convert CELCIUS; text "%5.1lf"; }
  Calibration (AD8_T10K, CELCIUS) {
	  0,   99.9,
	  1,   44.6,
	 31,   21.35,
	 47,    8.45,
	 64,   -1.10,
	 86,  -10.25,
	112,  -19.80,
	143,  -29.35,
	180,  -40.35,
	206,  -50.05,
	226,  -59.95,
	238,  -70.15,
	245,  -79.75,
	255,  -99.9
  }

TM typedef AD8 AD8_T30K { convert CELCIUS; text "%5.1lf";}
  Calibration (AD8_T30K, CELCIUS) {
	  0,  134.2000,
	  8,   96.8400,
	 13,   79.1900,
	 18,   68.6200,
	 23,   60.8800,
	 53,   33.4180,
	 79,   21.7160,
	105,   12.0750,
	182,  -12.6040,
	202,  -20.9860,
	223,  -31.4380,
	238,  -42.3560,
	243,  -48.9800,
	248,  -57.6800,
	255,  -77.1000
  }

TM typedef AD8 AD8_RPMV { convert RPM; text "%4d"; }
  Calibration (AD8_RPMV, RPM) {
		0,       0,
		2,       0,
		3,       6,
	  255,    6528.3
  }

TM typedef AD8 AD8_5A { convert AMPS; }
  Calibration (AD8_5A, AMPS) {
	  0,  0,
	256,  5
  }

TM typedef AD8 AD8_10A { convert AMPS; }
  Calibration (AD8_10A, AMPS) {
	  0,  0,
	256, 10
  }

TM typedef AD8 AD8_30A { convert AMPS; text "%4.1lf"; }
  Calibration (AD8_30A, AMPS) {
	  0,  0,
	256, 30
  }

TM typedef AD8 AD8_TFRI { convert AMPS; text "%4.1lf"; }
  Calibration (AD8_TFRI, AMPS) {
	  0, 0,
	256, 25
  }

TM typedef AD8 AD8_TFRT { convert CELCIUS; text "%5.1lf"; }
  Calibration (AD8_TFRT, CELCIUS) {
	  0,  0,
	256, 50
  }

TM typedef AD8 AD8_KV;
  Calibration (AD8_KV, VOLTS) {
	  0,  0,
	768, 10
  }

TM typedef UINT AD12 {
  collect x = sbw(x.address);
  convert VOLTS;
  text "%6.4lf";
}
  Calibration (AD12, VOLTS) {
		0,    0,
	65536, 10.0
  }

TM typedef AD12 AD12_T10K { convert KELVIN; text "%5.1lf"; }
  Calibration (AD12_T10K, KELVIN) {
		0,  400.0000,
	  256,  369.5500,
	 1792,  309.2500,
	 3328,  294.6400,
	 4608,  287.7580,
	 5888,  280.8680,
	 7168,  274.8560,
	15104,  252.3600,
	25600,  237.2000,
	41472,  220.0338,
	51712,  207.4870,
	58112,  197.5017,
	60416,  191.7188,
	61952,  186.1388,
	63488,  177.3168,
	64512,  166.7280,
	65024,  157.0290,
	65280,  150.7300
  }

TM typedef AD12 AD12_T30K { convert CELCIUS; text "%5.1lf"; }
  Calibration (AD12_T30K, CELCIUS) {
		0,  134.2000,
	 2048,   96.8400,
	 3328,   79.1900,
	 4608,   68.6200,
	 5888,   60.8800,
	13568,   33.4180,
	20224,   21.7160,
	26880,   12.0750,
	46592,  -12.6040,
	51712,  -20.9860,
	57088,  -31.4380,
	60928,  -42.3560,
	62208,  -48.9800,
	63488,  -57.6800,
	65280,  -77.1000
  }

TM typedef AD12 AD12_KTORR;
TM typedef AD12 AD12_DTORR;
TM typedef AD12 AD12_uGg;

TM typedef AD12 AD12_1KTORR { convert TORR; text "%5.1lf"; }
  Calibration (AD12_1KTORR, TORR) {
		0,      0,
	65536, 1000.0
  }

TM typedef UINT Ct16 { collect x = sbw(x.address); }
TM typedef UINT DA_SPt { collect x = 0xFFF & sbw(x.address); text "%4d"; }
TM typedef unsigned char DStat {
  collect x = sbb(x.address);
  text "%08b";
}

%{
  #define Cvt_Ct24_TMLONG(x) (0xFFFFFF & *(TMLONG *)&(x))
%}
TM typedef struct {
  unsigned int low;
  unsigned char high;
} Ct24 {  collect x {
			x.low = sbwa(x.address);
			x.high = sbba(x.address+2);
		  }
		  Convert TMLONG Cvt_Ct24_TMLONG();
		  text "%8lu";
		}
TM typedef signed short Angle { text "%5.1lf"; }
TM typedef signed short NAV_Angle { convert Angle; text "%5.1lf"; }
  Calibration (NAV_Angle, Angle) {
	-32768, -180,
	 32768, 180
  }

TM typedef unsigned long Feet { text "%6ld"; }
TM typedef signed short NAV_Alttd { convert Feet; text "%6ld"; }
  Calibration (NAV_Alttd, Feet) {
	-32767, 0,
		 0, 96428
  }

TM typedef unsigned short Knots { text "%6.1lf"; }
TM typedef unsigned short NAV_Knots { convert Knots; text "6.1lf"; }
  Calibration (NAV_Knots, Knots) {
	0, 0,
	65536, 1000
  }

TM 0 Hz UINT  MFCtr;
TM 0 Hz UINT  Synch;
TM MAXCOLS=128;
