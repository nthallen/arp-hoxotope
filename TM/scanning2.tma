%{
  /* scanning2.tma: replaces scanning.tma, getscan.tmc */
  #include <stdlib.h> /* for min/max */
  #include <malloc.h>
  #include "nortlib.h"
  #include "CmdData.h"
  #include "idx64.h"
  #include "ohf.h"
  #include "tmctime.h"
  #include "scanchop.h"
  
  /* Strategy:
    When scan begins, differentiate type of scan based on
    whether we are online, offline, altline or other.
    "Other" scans are traditional survey scans.
    Online, offline and altline scans are peak-finding
    (though it might make sense to do something different
    for offline, like maybe slope-finding)
    
    While scanning, record EtnPs, Ratio and dtime(). After
    peak scan is completed, finish fit and determine
    peak position, peak height and peak quality.
    Then (in a separate module) send (time,fit) values to
    RTG for the scan and also validate PkTime, PkHeight,
    PkQuality.
  */

  int which_line;
  int peakup_ohcell = 1;
  scanchop *od_scan, *oh_scan;
%}

{ AD8_5A last_OHCLI;
  last_OHCLI = OHCLI;
  unsigned long int Ratio; invalidate Ratio;
  double OD_PkTime; Invalidate OD_PkTime;
  double OD_PkHeight; Invalidate OD_PkHeight;
  double OD_PkStd; Invalidate OD_PkStd;
  double OD_PkPos; Invalidate OD_PkPos;
  unsigned char OD_PkQuality; Invalidate OD_PkQuality;
  double OH_PkTime; Invalidate OH_PkTime;
  double OH_PkHeight; Invalidate OH_PkHeight;
  double OH_PkStd; Invalidate OH_PkStd;
  double OH_PkPos; Invalidate OH_PkPos;
  unsigned char OH_PkQuality; Invalidate OH_PkQuality;
  state ( filter_point, od_filter_point, oh_filter_point);
  int lamps_on;
}

State not_scanning_etn {}

{ { depending on ( not_scanning_etn ) {
      if ( EtnFlg & IXFLAG_SCAN ) {
        which_line = EtnFlg & ~IXFLAG_SCAN;
        if ((which_line == 0 || which_line == IXFLAG_ONLINE)
            && last_OHCLI >= 8) {
          if ( which_line == 0 )
            msg(0, "Peaking up on the OH Cell");
          peakup_ohcell = 1;
        } else {
          if (which_line == 0)
            msg(0, "Peaking up on Axis 1");
          peakup_ohcell = 0;
        }
        if ( which_line == IXFLAG_ONLINE ) {
	  Validate scanning_od;
	} else if (which_line == IXFLAG_ALTLINE ) {
          lamps_on = 1;
	  Validate scanning_oh;
	} else if (which_line == IXFLAG_OFFLINE ) {
	  Validate scanning_off;
	} else {
          Validate scanning_etn;
        }
      }
    }
    if ( peakup_ohcell ) {
      Ratio = 0x10000;
      Ratio /= (OClUV + 5);
      Ratio *= RepRate2 ? SOCFG : iconvert(SOCNG);
    } else {
      Ratio = 0x100000;
      Ratio /= ((UVMon>>4) + (5<<4));
      Ratio *= SX1FG;
    }
    Validate Ratio;
  }
}

State scanning_etn {
  depending on (Ratio once, EtnPs) {
      if (ohf_point(EtnPs, Ratio))
        validate filter_point;
  }
  { if (!(EtnFlg & IXFLAG_SCAN)) {
      while (ohf_end_point()) validate filter_point;
  
      if ( Peakup_On && ohf_rate() <= 50 && ohf_rate() > 0 ) {
        if (ohf_peak_filter() == 0) {
          msg(MSG_FAIL, "Found absolutely Nothing");
          ohf_another_scan(low_limit, high_limit - low_limit, 25);
        } else if (ohf_peak_pos() < ohf_min_pos() + 156) {
          msg(MSG_WARN, "Peak is Below Scan Region");
          ohf_another_scan(max(ohf_min_pos(), low_limit + 1500) -1500, 2000, 15);
        } else if (ohf_peak_pos() > ohf_max_pos() - 710) {
          msg(MSG_WARN, "Peak is Above Scan Region");
          ohf_another_scan(min(ohf_peak_pos(), high_limit-2000) - 500, 2000, 15);
        } else if (ohf_rate() > 10) {
          ohf_another_scan(max(ohf_peak_pos(), 375) - 375, 1000, 5);
        } else ohf_set_position(ohf_peak_pos());
      } else msg(0, "Scan complete: peakup disabled");
      Validate not_scanning_etn;
    }
  }
}

State scanning_od {
  { if ( EtnFlg & IXFLAG_SCAN ) {
      if ( od_scan == 0 )
		od_scan = sc_new( 400, 4., 0 );
      sc_point( od_scan, EtnPs, dtime(), Ratio );
      Validate od_filter_point;
    } else {
      sc_endscan( od_scan );
      ci_sendfcmd( 2, "Set Etalon Online Position %u\n",
            od_scan->NewStart );
      OD_PkTime = od_scan->PkTime; Validate OD_PkTime;
      OD_PkHeight = od_scan->PkHeight; Validate OD_PkHeight;
      OD_PkStd = od_scan->PkStd; Validate OD_PkStd;
      OD_PkPos = od_scan->PkPos; Validate OD_PkPos;
      OD_PkQuality = od_scan->PkQuality; Validate OD_PkQuality;
      Validate not_scanning_etn;
    }
  }
}

State scanning_oh {
  { if ( ! (EHV1S && EHV2S) ) lamps_on = 0; }
  { if ( EtnFlg & IXFLAG_SCAN ) {
      if ( oh_scan == 0 ) oh_scan = sc_new( 400, 4., 0 );
      sc_point( oh_scan, EtnPs, dtime(), Ratio );
      Validate oh_filter_point;
    } else {
      sc_endscan( oh_scan );
	  if ( lamps_on )
		ci_sendfcmd( 2, "Set Etalon Online Position %u\n",
            oh_scan->NewStart );
      OH_PkTime = oh_scan->PkTime; Validate OH_PkTime;
      OH_PkHeight = oh_scan->PkHeight; Validate OH_PkHeight;
      OH_PkStd = oh_scan->PkStd; Validate OH_PkStd;
      OH_PkPos = oh_scan->PkPos; Validate OH_PkPos;
      OH_PkQuality = oh_scan->PkQuality; Validate OH_PkQuality;
      Validate not_scanning_etn;
    }
  }
}

State scanning_off {
  { if ( !(EtnFlg & IXFLAG_SCAN) ) Validate not_scanning_etn; }
}


Partition

%{
  int Peakup_On = 1;
%}

State PeakupCtrl_Wait {
  { if ( SW_St == SWS_PKUP_OFF ) {
      Peakup_On = 0;
      nl_error( 0, "Peakup Off" );
      Validate PeakupCtrl_Ack;
    } else if ( SW_St == SWS_PKUP_ON ) {
      Peakup_On = 1;
      nl_error( 0, "Peakup On" );
      Validate PeakupCtrl_Ack;
    }
  }
}

State PeakupCtrl_Ack {
  > SW Status Value to 0
  Hold until ( SW_St == 0 ) or 10;
  Validate PeakupCtrl_Wait;
}
