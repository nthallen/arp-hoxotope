%{
  /* scanning2.tma: replaces scanning.tma, getscan.tmc */
  #include <stdlib.h> /* for min/max */
  #include <malloc.h>
  #include "nortlib.h"
  #include "CmdData.h"
  #include "idx64.h"
  #include "ohf.h"
  #include "tmctime.h"
  
  /* Strategy:
	When scan begins, differentiate type of scan based on
	whether we are online, offline, altline or other.
	"Other" scans are traditional survey scans.
	Online, offline and altline scans are peak-finding
	(though it might make sense to do something different
	for offline, like maybe slope-finding)
	
	While scanning, record EtnPs, Ratio and dtime(). After
	peak scan is completed, finish fit and determine
	peak position, peak height and peak quality.
	Then (in a separate module) send (time,fit) values to
	RTG for the scan and also validate PkTime, PkHeight,
	PkQuality.
  */

  double sx, sx2, sx3, sx4, sy, sxy, sx2y;
  double *sdata, *etdata, *tdata;
  int which_line;
  unsigned short line_start;
  int nsdata;
  int n_scan;

  static void save_point( int x, double y ) {
    if ( n_scan >= nsdata ) {
	  nsdata = nsdata ? 2*nsdata : 128;
	  sdata = realloc( sdata, nsdata*sizeof(double) );
	  tdata = realloc( tdata, nsdata*sizeof(double) );
	  etdata = realloc( etdata, nsdata*sizeof(double) );
	  if ( sdata == 0 || tdata == 0 )
		nl_error( 3, "Out of memory in peakscan" );
	}
	etdata[n_scan] = x;
	tdata[n_scan] = dtime();
	sdata[n_scan++] = y;
  }
  int peakup_ohcell = 1;
%}

{ AD8_5A last_OHCLI;
  last_OHCLI = OHCLI;
  unsigned long int Ratio; invalidate Ratio;
  double PkTime; Invalidate PkTime;
  double PkHeight; Invalidate PkHeight;
  double PkStd; Invalidate PkStd;
  double PkPos; Invalidate PkPos;
  unsigned char PkQuality; Invalidate PkQuality;
  state (filter_point);
  int lamps_on;
}

State not_scanning_etn {}

{ { depending on ( not_scanning_etn ) {
	  if ( EtnFlg & IXFLAG_SCAN ) {
		which_line = EtnFlg & ~IXFLAG_SCAN;
		line_start = EtnPs;
		if ((which_line == 0 || which_line == IXFLAG_ONLINE)
			&& last_OHCLI >= 8) {
		  if ( which_line == 0 )
			msg(0, "Peaking up on the OH Cell");
		  peakup_ohcell = 1;
		} else {
		  if (which_line == 0)
			msg(0, "Peaking up on Axis 2");
		  peakup_ohcell = 0;
		}
		if ( which_line ) {
		  sx = sx2 = sx3 = sx4 = sy = sxy = sx2y = 0.;
		  n_scan = 0;
		  lamps_on = 1;
		  Validate scanning_line;
		} else Validate scanning_etn;
	  }
	}
	if ( peakup_ohcell ) {
	  Ratio = 0x10000;
	  Ratio /= (OClUV + 5);
	  Ratio *= RepRate2 ? SOCFG : iconvert(SOCNG);
	} else {
	  Ratio = 0x100000;
	  Ratio /= ((UVMon>>4) + (5<<4));
	  Ratio *= SX2FG;
	}
	Validate Ratio;
  }
}

State scanning_etn {
  depending on (Ratio once, EtnPs) {
	  if (ohf_point(EtnPs, Ratio))
		validate filter_point;
  }
  { if (!(EtnFlg & IXFLAG_SCAN)) {
	  while (ohf_end_point()) validate filter_point;
  
	  if ( Peakup_On && ohf_rate() <= 50 && ohf_rate() > 0 ) {
		if (ohf_peak_filter() == 0) {
		  msg(MSG_FAIL, "Found absolutely Nothing");
		  ohf_another_scan(low_limit, high_limit - low_limit, 25);
		} else if (ohf_peak_pos() < ohf_min_pos() + 156) {
		  msg(MSG_WARN, "Peak is Below Scan Region");
		  ohf_another_scan(max(ohf_min_pos(), low_limit + 3000) -3000, 2000, 15);
		} else if (ohf_peak_pos() > ohf_max_pos() - 710) {
		  msg(MSG_WARN, "Peak is Above Scan Region");
		  ohf_another_scan(min(ohf_peak_pos(), high_limit-3000) - 1000, 2000, 15);
		} else if (ohf_rate() > 10) {
		  ohf_another_scan(max(ohf_peak_pos(), 750) - 750, 1000, 5);
		} else ohf_set_position(ohf_peak_pos());
	  } else msg(0, "Scan complete: peakup disabled");
	  Validate not_scanning_etn;
	}
  }
}

State scanning_line {
  { if ( ! (EHV1S && EHV2S) ) lamps_on = 0; }
  { if ( EtnFlg & IXFLAG_SCAN ) {
	  if ( EtnFlg == IXFLAG_SCAN ) {
		double et, x, y, x2;
		et = EtnPs;
		x = n_scan;
		y = Ratio;
		sx += x;
		sy += y;
		sxy += x*y;
		x2 = x*x;
		sx2 += x2;
		sx2y += x2*y;
		sx3 += x2*x;
		sx4 += x2*x2;
		save_point( et, y );
	  }
    } else {
      double k11, k12, k21, k22, R1, R2, D, C, B, A, pkx;
	  unsigned short newstart;
      k11 = n_scan*sx2 - sx*sx;
      k12 = n_scan*sx3 - sx2*sx;
      k21 = k12;
      k22 = n_scan*sx4 - sx2*sx2;
      R1 = n_scan*sxy - sx*sy;
      R2 = n_scan*sx2y - sx2*sy;
      D = (k11*k22-k21*k12);
      C = (k11*R2-k21*R1)/D;
      B = (k22*R1-k12*R2)/D;
      A = (sy-B*sx-C*sx2)/n_scan;
	  /* Now is the fit useful?
	     y = A + B*x + C*x^2
		 center of parabola where x = -B/2C, y = A-B/4C
		 reasonable if C < 0 and x falls within the scan range.
		 If C < 0
		   if x is within scan range use it
		   else take appropriate end of the scan for new position
		 else if x is before midpoint of scan, take end of scan
		 else take beginning of scan
	  */
	  PkQuality = 0; /* highest quality */
	  if ( C < 0 ) {
		pkx = -B/(2*C);
		if ( pkx < 0 ) {
		  pkx = 0;
		  PkQuality = 1;
		} else if ( pkx > n_scan-1 ) {
		  pkx = n_scan - 1;
		  PkQuality = 1;
		}
	  } else {
		double x, y;
		PkQuality = 3; /* No peak */
		x = n_scan-1;
		y = A + B*x + C*x*x;
		pkx = A > y ? 0 : x;
	  }
	  PkHeight = A + B*pkx + C*pkx*pkx;
	  { unsigned xlo, xhi;
		xlo = floor(pkx);
		xhi = ceil(pkx);
		if ( xlo == xhi ) {
		  PkTime = tdata[xlo];
		  PkPos = etdata[xlo];
		} else if ( xhi != xlo+1 ) {
		  nl_error( 4, "Bad Math!" );
		} else {
		  PkTime = tdata[xlo] +
			(pkx-xlo) * (tdata[xhi]-tdata[xlo]);
		  PkPos = etdata[xlo] +
			(pkx-xlo) * (etdata[xhi]-etdata[xlo]);
		}
	  }
	  { int i;
		double sx2;
		sx2 = 0.;
		for ( i = 0; i < n_scan; i++ ) {
		  double x, y;
		  x = i;
		  y = A + B*x + C*x*x - sdata[i];
		  sx2 += y*y;
		}
		PkStd = sqrt(sx2/n_scan);
	  }
	  newstart = PkPos - (etdata[n_scan-1]-etdata[0])/2;
      if ( newstart > low_limit && newstart < high_limit ) {
		if ( which_line == IXFLAG_ONLINE || lamps_on ) {
		  if ( newstart != line_start ) {
			ci_sendfcmd( 2, "Set Etalon %s Position %u\n",
		  which_line == IXFLAG_ONLINE ? "Online" : "Altline",
		  newstart );
		  }
		}
	  } else {
		msg( 2, "Line peak found beyond soft limit" );
	  }
	  Validate PkHeight;
	  Validate PkPos;
	  Validate PkTime;
	  Validate PkStd;
	  Validate PkQuality;
	  Validate not_scanning_etn;
    }
  }
}

Partition

%{
  int Peakup_On = 1;
%}

State PeakupCtrl_Wait {
  { if ( SW_St == SWS_PKUP_OFF ) {
	  Peakup_On = 0;
	  nl_error( 0, "Peakup Off" );
	  Validate PeakupCtrl_Ack;
	} else if ( SW_St == SWS_PKUP_ON ) {
	  Peakup_On = 1;
	  nl_error( 0, "Peakup On" );
	  Validate PeakupCtrl_Ack;
	}
  }
}

State PeakupCtrl_Ack {
  > SW Status Value to 0
  Hold until ( SW_St == 0 ) or 10;
  Validate PeakupCtrl_Wait;
}
