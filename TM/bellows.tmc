%{
  /* Bellows peakup via chop mode. v1.2
	 Look at IXStt, EtnPs and UVMon
	 While chopping, calculate the slope of UVMon vs EtnPs
	 When BF_NPOINTS have been averaged with a minimum of BF_MINPOINTS
	 on and off the line, decide whether to drive the bellows
	 one way or the other.
	 If chop mode ends, reset the summations.
	 If the NoPeakUp bit is cleared, reset the summations.
  */
  /* While chopping, calculate sign of slope of (EtnPs, UVMon).
	 Let S(x) = sum of x, etc., N = number of points
   
	 The formula for the slope is:
   
		 N * S(x*y) - S(x) * S(y)
		 ------------------------
		 N * S(x*x) - S(x) * S(x)

	 The denominator can be shown to be never negative, so the sign
	 of the slope is the sign of the numerator. To fit within the
	 32-bit word limitation, I will reduce the inputs via:

		 x = (EtnPs - low_limit)/10
		 y = UVMon>>4

	 This is reasonable, since low_limit is a constant which is fixed
	 throughout a run, and dithering motion is usually limited to
	 multiples of 10. Reducing with a different value of low_limit
	 will not change the results. UVMon can be mapped down to its
	 12-bit resolution with no loss of precision.
	 
	 Modifications for peak scanning:
	 
	 Our minimum condition will be based on the standard
	 deviation of the EtnPs, since we will no longer be
	 spending any significant amount of time online or
	 offline. Even with the above reduction in magnitude
	 of EtnPs, S(x*x) will not remain within 32 bits,
	 so we'll need to move to floating point.
 */
  #include "nortlib.h"

  static unsigned long sum_x, sum_y, sum_xy;
  static double sum_x2;
  static unsigned short sum_count, sum_online;
  #define BF_NPOINTS 240
  #define BF_MINSTD 30
  #define BF_NSTEPS "1000"
  #define dsquared(x) ((double)(x)*(double)(x))
%}

{ unsigned short Reset_counts;
  
  Reset_counts = !( Peakup_On );
  if (!Reset_counts) {
    unsigned short x;
    unsigned long y;

    x = (EtnPs - low_limit)/10;
    y = UVMon>>4;
    sum_x += x;
    sum_y += y;
    sum_xy += x * y;
    sum_x2 += dsquared(x);
    if (sum_count++ >= BF_NPOINTS ) {
      double std;
      std = sum_x;
      std = std/sum_count;
      std = sqrt(sum_x2/sum_count - std * std);
      if ( std > BF_MINSTD ) {
        unsigned long sum_x_sum_y;

        sum_x_sum_y = sum_y/sum_count;
        sum_x_sum_y *= sum_x;
        sum_x_sum_y += (sum_x * (sum_y % sum_count))/sum_count;
        if (sum_xy > sum_x_sum_y)
          ci_sendcmd("Drive Bellows Out " BF_NSTEPS "\n", 0);
        else
          ci_sendcmd("Drive Bellows In " BF_NSTEPS "\n", 0);
      }
      Reset_counts = 1;
    }
  }
  if (Reset_counts && sum_count != 0) {
    sum_count = sum_online = 0;
    sum_x = sum_y = sum_xy = 0;
    sum_x2 = 0.;
  }
}
