% XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
% XX                      god_asho.3_1                          XX
% XX                                                            XX
% XX  created May, 1994.  Corrects some of the deficiencies     XX
% XX     in god_asho.3_0, better use of the n2 signal; puts the XX
% XX     two axes on a common calibration, equal to the average XX
% XX     of the two axes (using the times when they are both    XX
% XX     measuring OH or HO2). Also corrects for counts that    XX
% XX     fall outside the adjustable gate.                      XX
% XX                                                            XX
% XX                                                            XX
% XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
echo
%  flight.mat contains fltday yymmdd 
load flight

%  hox.mat is the file which includes the difference counts when the
%      back NO injector is on with constant NO flow.

load hox

%  n2.mat is the file which includes the data for when the n2 filter is in

load n2

%  oh.mat is the file when both axes are measuring OH

load oh
%

% ho2.mat is the file that includes the data from titrations at the front
%     injector

load ho2

% 
% load zeros  (SD__P0,SD_DP0,temperature zero)
load \asho\batch\zero
%
% load calibration data  (calibation of axis 1, axis 2, etc.)
load \asho\batch\constant
c1_hox=c1.*ones(time_hox)';
c2_hox=c2.*ones(time_hox)';
c1_oh=c1.*ones(time_oh)';
c2_oh=c2.*ones(time_oh)';
clear c1 c2
%
%  convert all to GMT
%  load nav
%  toff=median(TDrft)                                         
time_hox=time2d(time_hox);%+toff;  
time_n2=time2d(time_n2);%+toff;
time_oh=time2d(time_oh);%+toff;
time_ho2=time2d(time_ho2);%+toff;
%
%  Set up temperature and pressure; calculate M and velocity
%
temp_hox=saff1_hox;%+ offset
temp_n2=saff1_n2;%+ offset
temp_oh=saff1_oh;%+ offset
temp_ho2=saff1_no;%+ offset

press_hox=sd__p_hox-sd__p0;
press_n2=sd__p_n2-sd__p0;
press_oh=sd__p_oh-sd__p0;
press_ho2=sd__p_no-sd__p0;

diffp_hox=sd_dp_hox-sd_dp0;
diffp_ho2=sd_dp_no-sd_dp0;    

% calculate the number density 
M_hox=M(press_hox,temp_hox);
M_n2=M(press_n2,temp_n2);
M_oh=M(press_oh,temp_oh);
M_ho2=M(press_ho2,temp_ho2);
 
% calculate the velocity in the duct
vel_hox=velocity(press_hox,diffp_hox,temp_hox);
vel_ho2=velocity(press_ho2,diffp_ho2,temp_ho2);             
%
clear saff1_hox saff1_n2 saff1_oh saff1_no sd__p_hox sd__p_n2 sd__p_no 
clear sd__p_oh sd_dp_hox sd_dp_n2 sd_dp_oh diffp_hox diffp_ho2   
%
% calculate NO density
no_hox=no(noflw_hox,vel_hox);
%
% calculate NO density during titration
nof1=no(nof1,vel_ho2);  
nof2=no(nof2,vel_ho2);    
nof3=no(nof3,vel_ho2);    
nof4=no(nof4,vel_ho2);    
nof5=no(nof5,vel_ho2);    
nof6=no(nof6,vel_ho2);    
%
nof=[nof1 nof2 nof3 nof4 nof5 nof6];                
clear nof1 nof2 nof3 nof4 nof5 nof6
clear noflw_hox
%
% calculate Quenching 
%
Q_hox=Q2(M_hox,temp_hox);
Q_oh=Q2(M_oh,temp_oh);
%
% calculate OH partition function
% 
partitionrt=popul(298);
partition_hox=popul(temp_hox);
partition_oh=popul(temp_oh);
Nj_hox=partition_hox./partitionrt;
Nj_oh=partition_oh./partitionrt;
clear partitionrt partition_hox partition_oh
%
% calculate N2 signal online
%
n2sig1=(sx1sig_n2+dx1sig_n2)./(.78.*M_n2);
n2sig2=(sx2sig_n2+dx2sig_n2)./(.78.*M_n2);

% On two flights, 940327 and 930428, damage to the beam splitter, caused 
%       change in calibration.
%       we assume that only axis 2 was affected. (This results in a net change,
%       to axis 2 calibration of 2.5.  To make the software cruise through 
%       the abrupt transition, we will multiply signals by constants (axis 1)
%       although not at axis 2.  The corrections to axis 2 get within 13 percent
%       of the total correction (based on the simultaneous OH and HOx 
%       measurements.

% On the flight of 940604, modulation in the background of axis 2 causes bad
%       stuff.  We use the time when both axes are measuring OH to correct the
%       background at axis 2.
if fltday=='940327'
        fx0327
elseif fltday=='940328'
        fx0328
elseif fltday=='940604'
        fx0604
end
%

% determine n2signal at hox times
n2_x1=NaN.*ones(1:length(time_hox));
n2_x2=n2_x1;
% for each hox point, find four nearest n2 points and linearly interpolate
%       to estimate n2signal at time_hox
for i=1:length(time_hox); 
        [k,l]=sort(abs(time_n2-time_hox(i)));
        j1=polyfit(time_n2(l(1:4)),n2sig1(l(1:4)),1);
        j2=polyfit(time_n2(l(1:4)),n2sig2(l(1:4)),1);
        n2_x1(i)=polyval(j1,time_hox(i));
        n2_x2(i)=polyval(j2,time_hox(i));
end
%
% make a less noisy representation of the background for axis 1
sx1sig_hoxf=medianf(sx1sig_hox,20);
dx1sig_hoxf=dx1sig_hox+sx1sig_hox-sx1sig_hoxf';

% determine wavelength detuning;
%   The assumption is made that the line tracking program is not biased to
%       one side or the other of the true oine center. By running a median filter 
%       through the data we hope to capture the true online position and then calculate a 
%       difference for each point.
%
trueo=medianf(etnps_hox,40);
trueon=meanf(trueo',40);
clear trueo
del_hox=etnps_hox-trueon';
%
% calculate change in pumping rate due to pressure broadening and 
%       not being perfectly on line.  .00135 is the number of wavenubers
%       per step and will change if a different etalon, or etalon order 
%       is used.

corr_hox=NaN.*ones(time_hox);
corr_hox=overlap(temp_hox,100..*(press_hox),-del_hox.*(.00135),linewidth)';
i=find(abs(del_hox)>30);
if length(i)>0
        corr_hox(i)=NaN.*(i);
end
%
%  Correct the calibration for the fluorescence that falls outside the
%       adjust. gate but inside the fixed gate.  This was determined from the
%       data of 940321, 940322, 940406, 940409.  Also includes correction for
%       the 1.1 percent increase in the N2 raman signal
%
%       Gate delays were changed for the flight of 940729 and so the gate_corr
%       is different.
if eval(fltday)< 940701
        gatecorr_hox=1-exp(-15.6./(Q_hox.*700))-.025;
        gatecorr_oh=1-exp(-15.6./(Q_oh.*700))-.025;
else 
        gatecorr_hox=1-exp(-19../(Q_hox.*700));
        gatecorr_oh=1-exp(-19../(Q_oh.*700));
end
%
% calculate OH
%
coh1=c1_hox.*n2_x1.*gatecorr_hox'.*Nj_hox';
coh2=c2_hox.*n2_x2.*gatecorr_hox'.*Nj_hox';
Qc1=Q_hox.*coh1'.*M_hox;
Qc2=Q_hox.*coh2'.*M_hox;
OH=dx1sig_hoxf./(corr_hox.*Qc1);
HOx=dx2sig_hox./(corr_hox.*Qc2);
%
% calculate OH for both axes when NO is off
%
for i=1:length(time_oh)
        [l,k]=min(abs(time_hox-time_oh(i)));
        n2_x1oh(i)=n2_x1(k);
        n2_x2oh(i)=n2_x2(k);
        del_oh(i)=etnps_oh(i)-trueon(k);
end
corr_oh=overlap(temp_oh,100..*(press_oh),-del_oh.*(.00135),linewidth)';
i=find(abs(del_oh)>30);
if length(i)>0
        corr_oh(i)=NaN.*(i);
end

coh1_oh=c1_oh.*n2_x1oh.*gatecorr_oh'.*Nj_oh';
coh2_oh=c2_oh.*n2_x2oh.*gatecorr_oh'.*Nj_oh';
Qc1_oh=Q_oh.*coh1_oh'.*M_oh;
Qc2_oh=Q_oh.*coh2_oh'.*M_oh;
OH_x1=dx1sig_oh./(corr_oh.*Qc1_oh);
OH_x2=dx2sig_oh./(corr_oh.*Qc2_oh);
%
% calculate HO2
%
x1sig=[dx1sig_no1 dx1sig_no2 dx1sig_no3 dx1sig_no4 dx1sig_no5 dx1sig_no6];
x2sig=[dx2sig_no1 dx2sig_no2 dx2sig_no3 dx2sig_no4 dx2sig_no5 dx2sig_no6];       
[topsig1,topflow1]=max(x1sig');
[topsig2,topflow2]=max(x2sig');

clear dx1sig_no1 dx1sig_no2 dx1sig_no3 dx1sig_no4 dx1sig_no5 dx1sig_no6
clear dx2sig_no1 dx2sig_no2 dx2sig_no3 dx2sig_no4 dx2sig_no5 dx2sig_no6
clear sx1sig_no1 sx1sig_no2 sx1sig_no3 sx1sig_no4 sx1sig_no5 sx1sig_no6
clear sx2sig_no1 sx2sig_no2 sx2sig_no3 sx2sig_no4 sx2sig_no5 sx2sig_no6
%
% 
% determine hox times closest to HO2 scans
iho2time=NaN.*ones(time_ho2);
j=1;
k2=1;
mm=find(dx2sig_hox~=NaN);
for i=1:length(time_ho2);
        [k1,k2]=min(abs(time_ho2(i)-time_hox(mm)));
        iho2time(i)=mm(k2);
        iho2mis(i)=k1;
end 
del_ho2=etnps_no-trueon(iho2time)';
%save god3_1
i=find(temp_ho2+press_ho2+del_ho2~=NaN);   
corr_ho2=NaN.*ones(temp_ho2);
corr_ho2(i)=overlap(temp_ho2(i),100..*(press_ho2(i)),-del_ho2(i).*(.00135),linewidth)';
titrate_x2=topsig2./(corr_ho2.*Qc2(iho2time))';
titrate_x1=topsig1./(corr_ho2.*Qc1(iho2time))';
diff_hox=titrate_x2./HOx(iho2time)';
i=find(diff_hox~=NaN);
diff_hoxf=diff_hox;
diff_hoxf(i)=medianf(diff_hox(i)',5);
%
% determine the kinetic correction at hox times
%
if fltday=='940604'| fltday=='940729'| fltday=='940731' 
        kcorr=1.15.*ones(1:length(time_hox));
%       chlorine atom contaminates the determination of the kinetic correction.
%       we assume that 1.15 is good estimate. 
else
j=0;
kcorr=NaN.*ones(1:length(time_hox));
for i=1:length(time_ho2)-2
        while(time_hox(j+1)<time_ho2(i+1)&time_hox(j+1)<time_ho2(length(time_ho2)))
            kcorr(j+1)=diff_hoxf(i+1);
            j=j+1;
        end
end
end
%
%
HOxf=HOx.*kcorr';

% now place axis 1 and axis 2 on common calibration by using times when
%  OH and HO2 are being measured simultaneously at both axis

cal_diff=OH_x1./OH_x2;

% use HO2 titrations to increase the signal to noise of this difference
%   .. but only when peak signal is not at highest (or lowest) NO flow

i=find(topflow1~=6&topflow2~=6&topflow1~=1&topflow2~=1);
cal_diff(i)=titrate_x1(i)./titrate_x2(i);

% median filter
cal_diff_f=cal_diff;
i=find(cal_diff~=NaN);
cal_diff_f(i)=medianf(cal_diff(i),3);

% apply correction to OH and HO2 data.
cal_diff_hox=NaN.*time_hox;
HOxc=HOxf;
OHc=OH;
if fltday~='940604'| fltday~='940729'| fltday~='940731' 
                    %We will use calibrations as is for this flight due
                    % due to chlorine atom contaimination.  After correcting
                    % background at axis 2, OH at two axes agree.
for i=1:length(time_hox);
        [k,l]=sort(abs(time_ho2-time_hox(i)));
        p=find(cal_diff_f(l)~=NaN);
        j=polyfit(time_ho2(l(1:4)),cal_diff_f(l(p(1:4))),1);
        cal_diff_hox(i)=polyval(j,time_hox(i));
        HOxc(i)=HOxf(i).*(1+cal_diff_hox(i))./2;
        OHc(i)=OH(i).*(1+(1../cal_diff_hox(i)))./2;
end
end

HO2=NaN.*OHc;
for i=1:length(OHc);
        if (OHc(i)./HOxc(i)~=NaN)
                rat=1.3.*((HOxc(i)-OHc(i))./OHc(i));
                ratnext=.10;
                while (abs(rat-ratnext)./rat>.1)
                        ratnext=rat;
                        conv=ho2conv(temp_hox(i),M_hox(i),rat);
                        hox=HOxc(i)./conv; 
                        HO2(i)=hox-OHc(i);
                        rat=HO2(i)./OHc(i);
                end
        end
end
clear conv hox i iho2mis iho2time j j1 j2 k k1 k2 l mm ocluv0 p rat ratnext
clear uvmon0 x1dist x2dist x3dist x1las0 x2las0 
