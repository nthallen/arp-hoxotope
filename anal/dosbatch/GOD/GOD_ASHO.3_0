% XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
% XX                      god_asho.3_0                          XX
% XX                                                            XX
% XX   archive 5/16/94, used for first ashoe flights with       XX
% XX   new rear injector.  Calibration of HO2 used axis two     XX
% XX   data only; OH axis one.  Also did not include correction XX
% XX   for OH fluorescence occuring outside of gate.            XX
% XX   HO2 calculated from peak value of titration at axis 2    XX
% XX   and then an empirical correction for constant NO from    XX
% XX   back injector is used to get HO2.                        XX
% XX                                                            XX
% XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX


%  hox.mat is the file which includes the difference counts when the
%      back NO injector is on with constant NO flow.

load hox

%  n2.mat is the file which includes the data for when the n2 filter is in

load n2

%  oh.mat is the file when both axes are measuring OH

load oh
%

% ho2.mat is the file that includes the data from titrations at the front
%     injector

load ho2

% 
% load zeros  (SD__P0,SD_DP0,temperature zero)
load \asho\batch\zero
%
% load calibration data  (calibation of axis 1, axis 2, etc.)
load \asho\batch\constant
%
%  convert all to GMT
%  load nav
%  toff=median(TDrft)                                         
time_hox=time2d(time_hox);%+toff;  
time_n2=time2d(time_n2);%+toff;
time_oh=time2d(time_oh);%+toff;
%
%  Set up temperature and pressure; calculate M and velocity
%
temp_hox=saff1_hox;%+ offset
temp_n2=saff1_n2;%+ offset
temp_oh=saff1_oh;%+ offset
press_hox=sd__p_hox-sd__p0;
press_n2=sd__p_n2-sd__p0;
press_oh=sd__p_oh-sd__p0;
diffp_hox=sd_dp_hox-sd_dp0;

% calculate the number density 
M_hox=M(press_hox,temp_hox);
M_n2=M(press_n2,temp_n2);
M_oh=M(press_oh,temp_oh);
 
% calculate the velocity in the duct
vel_hox=velocity(press_hox,diffp_hox,temp_hox);
%
clear saff1_hox saff1_n2 saff1_oh sd__p_hox sd__p_n2 sd__p_oh sd_dp_hox 
clear sd_dp_n2 sd_dp_oh diffp_hox
%
% calculate NO density
no_hox=no(noflw_hox,vel_hox);
%
clear noflw_hox
%
% calculate Quenching 
%
Q_hox=Q2(M_hox,temp_hox);
Q_oh=Q2(M_oh,temp_oh);
%
% calculate OH partition function
% 
partitionrt=popul(298);
partition_hox=popul(temp_hox);
partition_oh=popul(temp_oh);
Nj_hox=partition_hox./partitionrt;
Nj_oh=partition_oh./partitionrt;
clear partitionrt partition_hox partition_oh
%
% calculate N2 signal
%
n2sig1=((2..*sx1sig_n2+dx1sig_n2)./2)./(.78.*M_n2);
n2sig2=((2..*sx2sig_n2+dx2sig_n2)./2)./(.78.*M_n2);
% median filter this data
n2sig1f=medianf(n2sig1,3);
n2sig2f=medianf(n2sig2,3);
% determine n2signal at hox times
j=0;
n2_x1=NaN.*ones(1:length(time_hox));
n2_x2=n2_x1;
for i=1:length(time_n2)-2
        while(time_hox(j+1)<time_n2(i+1)&time_hox(j+1)<time_n2(length(time_n2)))
            n2_x1(j+1)=n2sig1f(i);
            n2_x2(j+1)=n2sig2f(i);
            j=j+1;
         end
end
%
% make a less noisy representation of the background for axis 1
sx1sig_hoxf=medianf(sx1sig_hox,20);
dx1sig_hoxf=dx1sig_hox+sx1sig_hox-sx1sig_hoxf';

% determine wavelength detuning;
%   The assumption is made that the line tracking program is not biased to
%       one side or the other of the true oine center. By running a median filter 
%       through the data we hope to capture the true online position and then calculate a 
%       difference for each point.
%
trueo=medianf(etnps_hox,40);
trueon=meanf(trueo',40);
clear trueo
del=etnps_hox-trueon';
%
% calculate change in pumping rate due to pressure broadening and 
%       not being perfectly on line.  .00135 is the number of wavenubers
%       per step and will change if a different etalon, or etalon order 
%       is used.

corr_hox=NaN.*ones(time_hox);
corr_hox=overlap(temp_hox,100..*(press_hox),-del.*(.00135),linewidth)';
i=find(abs(del)>30);
if length(i)>0
        corr_hox(i)=NaN.*(i);
end
%
% calculate OH
%
coh1=c1.*n2_x1.*Nj_hox';
coh2=c2.*n2_x2.*Nj_hox';
Qc1=Q_hox.*coh1'.*M_hox;
Qc2=Q_hox.*coh2'.*M_hox;
OH=dx1sig_hoxf./(corr_hox.*Qc1);
HOx=dx2sig_hox./(corr_hox.*Qc2);
%
% calculate OH for both axes when NO is off
%
for i=1:length(time_oh)
        [l,k]=min(abs(time_hox-time_oh(i)));
        n2_x1oh(i)=n2_x1(k);
        n2_x2oh(i)=n2_x2(k);
        corr_oh(i)=corr_hox(k);
end
dx1sig_oh=dx1sig_oh;
dx2sig_oh=dx2sig_oh;
coh1_oh=c1.*n2_x1oh.*Nj_oh';
coh2_oh=c2.*n2_x2oh.*Nj_oh';
Qc1_oh=Q_oh.*coh1_oh'.*M_oh;
Qc2_oh=Q_oh.*coh2_oh'.*M_oh;
OH_x1=dx1sig_oh./(corr_oh'.*Qc1_oh);
OH_x2=dx2sig_oh./(corr_oh'.*Qc2_oh);
%
% calculate HO2
%
x1sig=[dx1sig_no1 dx1sig_no2 dx1sig_no3 dx1sig_no4 dx1sig_no5 dx1sig_no6];
x2sig=[dx2sig_no1 dx2sig_no2 dx2sig_no3 dx2sig_no4 dx2sig_no5 dx2sig_no6];       
[topsig1,topflow1]=max(x1sig');
[topsig2,topflow2]=max(x2sig');
time_ho2=time2d(time_ho2);%+toff;
clear dx1sig_no1 dx1sig_no2 dx1sig_no3 dx1sig_no4 dx1sig_no5 dx1sig_no6
clear dx2sig_no1 dx2sig_no2 dx2sig_no3 dx2sig_no4 dx2sig_no5 dx2sig_no6
clear sx1sig_no1 sx1sig_no2 sx1sig_no3 sx1sig_no4 sx1sig_no5 sx1sig_no6
clear sx2sig_no1 sx2sig_no2 sx2sig_no3 sx2sig_no4 sx2sig_no5 sx2sig_no6
%
%  Set up temperature and pressure; calculate M and velocity
%
temp_ho2=saff1_no;%+ offset
press_ho2=sd__p_no-sd__p0;
diffp_ho2=sd_dp_no-sd_dp0;
M_ho2=M(press_ho2,temp_ho2);
vel_ho2=velocity(press_ho2,diffp_ho2,temp_ho2);
%
clear saff1_no sd__p_no sd_dp_no diffp_no
%
% calculate NO density
nof1=no(nof1,vel_ho2);  
nof2=no(nof2,vel_ho2);    
nof3=no(nof3,vel_ho2);    
nof4=no(nof4,vel_ho2);    
nof5=no(nof5,vel_ho2);    
nof6=no(nof6,vel_ho2);    
%
nof=[nof1 nof2 nof3 nof4 nof5 nof6];                
clear nof1 nof2 nof3 nof4 nof5 nof6

% determine hox times closest to HO2 scans
iho2time=NaN.*ones(time_ho2);
j=1;
k2=1;
mm=find(dx2sig_hox~=NaN);
for i=1:length(time_ho2);
        [k1,k2]=min(abs(time_ho2(i)-time_hox(mm)));
        iho2time(i)=mm(k2);
        iho2mis(i)=k1;
end 
del_ho2=etnps_no-trueon(iho2time)';
corr_ho2=overlap(temp_ho2,100..*(press_ho2),-del_ho2.*(.00135),linewidth)';
titrate_x2=topsig2./(corr_ho2.*Qc2(iho2time))';
titrate_x1=topsig1./(corr_ho2.*Qc1(iho2time))';
diff_hox=titrate_x2./HOx(iho2time)';
i=find(diff_hox~=NaN);
diff_hoxf=diff_hox;
diff_hoxf(i)=medianf(diff_hox(i)',5);
%
% determine the kinetic correction at hox times
%
j=0;
kcorr=NaN.*ones(1:length(time_hox));
for i=1:length(time_ho2)-2
        while(time_hox(j+1)<time_ho2(i+1)&time_hox(j+1)<time_ho2(length(time_ho2)))
            kcorr(j+1)=diff_hoxf(i+1);
            j=j+1;
        end
end
%
%
HOxf=HOx.*kcorr';
HO2=NaN.*OH;
for i=1:length(OH);
        if (OH(i)./HOxf(i)~=NaN)
                rat=1.3.*((HOxf(i)-OH(i))./OH(i));
                ratnext=.10;
                while (abs(rat-ratnext)./rat>.1)
                        ratnext=rat;
                        conv=ho2conv(temp_hox(i),M_hox(i),rat);
                        hox=HOxf(i)./conv; 
                        HO2(i)=hox-OH(i);
                        rat=HO2(i)./OH(i);
                end
        end
end
 
